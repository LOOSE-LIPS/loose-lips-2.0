"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _clientLogger = require("@storybook/client-logger");

var _clientApi = require("@storybook/client-api");

var _extractId = require("./extract-id");

var _RegisterContext = _interopRequireDefault(require("../components/RegisterContext.svelte"));

var _RenderContext = _interopRequireDefault(require("../components/RenderContext.svelte"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* Called from a webpack loader and a jest transformation.
 *
 * It mounts a Stories component in a context which disables
 * the rendering of every <Story/> and <Template/> but instead
 * collects names and properties.
 *
 * For every discovered <Story/>, it creates a storyFn which
 * instantiate the main Stories component: Every Story but
 * the one selected is disabled.
 */
var createFragment = document.createDocumentFragment ? function () {
  return document.createDocumentFragment();
} : function () {
  return document.createElement('div');
};

var _default = function _default(StoriesComponent, _ref) {
  var _ref$stories = _ref.stories,
      stories = _ref$stories === void 0 ? {} : _ref$stories,
      allocatedIds = _ref.allocatedIds;
  var repositories = {
    meta: null,
    stories: []
  }; // extract all stories

  try {
    var context = new _RegisterContext["default"]({
      target: createFragment(),
      props: {
        Stories: StoriesComponent,
        repositories: repositories
      }
    });
    context.$destroy();
  } catch (e) {
    _clientLogger.logger.error("Error extracting stories ".concat(e.toString()), e);
  }

  var meta = repositories.meta;

  if (!meta) {
    _clientLogger.logger.error('Missing <Meta/> tag');

    return {};
  }

  var globalComponent = meta.component; // collect templates id

  var templatesId = repositories.stories.filter(function (story) {
    return story.isTemplate;
  }).map(function (story) {
    return story.id;
  }); // check for duplicate templates

  var duplicateTemplatesId = templatesId.filter(function (item, index) {
    return templatesId.indexOf(item) !== index;
  });

  if (duplicateTemplatesId.length > 0) {
    _clientLogger.logger.warn("Found duplicates templates id for stories '".concat(meta.name, "': ").concat(duplicateTemplatesId));
  }

  return {
    meta: meta,
    stories: repositories.stories.filter(function (story) {
      return !story.isTemplate;
    }).reduce(function (all, story) {
      var id = story.id,
          name = story.name,
          template = story.template,
          component = story.component,
          _story$source = story.source,
          source = _story$source === void 0 ? false : _story$source,
          props = _objectWithoutProperties(story, ["id", "name", "template", "component", "source"]);

      var storyId = (0, _extractId.extractId)(story, allocatedIds);

      if (!storyId) {
        return all;
      }

      var unknownTemplate = template != null && templatesId.indexOf(template) < 0;

      var storyFn = function storyFn(args) {
        if (unknownTemplate) {
          throw new Error("Story ".concat(name, " is referencing an unknown template ").concat(template));
        }

        return {
          Component: _RenderContext["default"],
          props: {
            Stories: StoriesComponent,
            storyName: name,
            templateId: template,
            args: args,
            sourceComponent: component || globalComponent
          }
        };
      };

      storyFn.storyName = name;
      Object.entries(props).forEach(function (_ref2) {
        var _ref3 = _slicedToArray(_ref2, 2),
            k = _ref3[0],
            v = _ref3[1];

        storyFn[k] = v;
      }); // inject story sources

      var storyDef = stories[template ? "tpl:".concat(template) : storyId];
      var hasArgs = storyDef ? storyDef.hasArgs : true; // inject source snippet

      var rawSource = storyDef ? storyDef.source : null;

      if (rawSource) {
        storyFn.parameters = (0, _clientApi.combineParameters)(storyFn.parameters || {}, {
          storySource: {
            source: rawSource
          }
        });
      }

      var snippet;

      if (source === true || source === false && !hasArgs) {
        snippet = rawSource;
      } else if (typeof source === 'string') {
        snippet = source;
      }

      if (snippet) {
        storyFn.parameters = (0, _clientApi.combineParameters)(storyFn.parameters || {}, {
          docs: {
            source: {
              code: snippet
            }
          }
        });
      } // eslint-disable-next-line no-param-reassign


      all[storyId] = storyFn;
      return all;
    }, {})
  };
};

exports["default"] = _default;