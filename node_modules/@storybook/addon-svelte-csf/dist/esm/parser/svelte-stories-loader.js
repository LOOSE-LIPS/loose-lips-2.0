var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import dedent from 'ts-dedent';
import { readFileSync } from 'fs';
import { extractStories } from './extract-stories';

var parser = require.resolve('./collect-stories').replace(/[/\\]/g, '/'); // From https://github.com/sveltejs/svelte/blob/8db3e8d0297e052556f0b6dde310ef6e197b8d18/src/compiler/compile/utils/get_name_from_filename.ts
// Copied because it is not exported from the compiler


export function getNameFromFilename(filename) {
  if (!filename) return null;
  var parts = filename.split(/[/\\]/).map(encodeURI);

  if (parts.length > 1) {
    var index_match = parts[parts.length - 1].match(/^index(\.\w+)/);

    if (index_match) {
      parts.pop();
      parts[parts.length - 1] += index_match[1];
    }
  }

  var base = parts.pop().replace(/%/g, 'u').replace(/\.[^.]+$/, '').replace(/[^a-zA-Z_$0-9]+/g, '_').replace(/^_/, '').replace(/_$/, '').replace(/^(\d)/, '_$1');

  if (!base) {
    throw new Error("Could not derive component name from file ".concat(filename));
  }

  return base[0].toUpperCase() + base.slice(1);
}

function transformSvelteStories(code) {
  // eslint-disable-next-line no-underscore-dangle
  var resource = this._module.resource;
  var componentName = getNameFromFilename(resource);
  var source = readFileSync(resource).toString();
  var storiesDef = extractStories(source);
  var stories = storiesDef.stories;
  var storyDef = Object.entries(stories).filter(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        def = _ref2[1];

    return !def.template;
  }).map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 1),
        id = _ref4[0];

    return "export const ".concat(id, " = __storiesMetaData.stories[").concat(JSON.stringify(id), "]");
  }).join('\n');
  var codeWithoutDefaultExport = code.replace('export default ', '//export default');
  return dedent(_templateObject || (_templateObject = _taggedTemplateLiteral(["", "\n    const { default: parser } = require('", "');\n    const __storiesMetaData = parser(", ", ", ");\n    export default __storiesMetaData.meta;\n    ", ";\n  "])), codeWithoutDefaultExport, parser, componentName, JSON.stringify(storiesDef), storyDef);
}

export default transformSvelteStories;