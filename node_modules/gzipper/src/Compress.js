"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Compress = void 0;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var util_1 = __importDefault(require("util"));
var worker_threads_1 = require("worker_threads");
var helpers_1 = require("./helpers");
var Logger_1 = require("./logger/Logger");
var constants_1 = require("./constants");
var Incremental_1 = require("./Incremental");
var Config_1 = require("./Config");
var LogLevel_enum_1 = require("./logger/LogLevel.enum");
var Compress_service_1 = require("./Compress.service");
/**
 * Compressing files.
 */
var Compress = /** @class */ (function () {
    /**
     * Creates an instance of Compress.
     */
    function Compress(target, outputPath, options) {
        if (options === void 0) { options = {}; }
        this.nativeFs = {
            lstat: util_1.default.promisify(fs_1.default.lstat),
            readdir: util_1.default.promisify(fs_1.default.readdir),
        };
        Logger_1.Logger.setVerboseMode(options.verbose);
        this.config = new Config_1.Config();
        if (!target) {
            var message = constants_1.NO_PATH_MESSAGE;
            Logger_1.Logger.log(message, LogLevel_enum_1.LogLevel.ERROR);
            throw new Error(message);
        }
        if (outputPath) {
            this.outputPath = path_1.default.resolve(process.cwd(), outputPath);
        }
        if (options.incremental) {
            this.incremental = new Incremental_1.Incremental(this.config);
        }
        this.target = path_1.default.resolve(process.cwd(), target);
        this.options = options;
        this.service = new Compress_service_1.CompressService(this.options);
        this.compressionInstance = this.service.getCompressionInstance();
    }
    /**
     * Start compressing files.
     */
    Compress.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var files, hrtime, hrtimeStart, workersResponse, error_1, filesCount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 11, , 12]);
                        if (!this.outputPath) return [3 /*break*/, 2];
                        return [4 /*yield*/, helpers_1.Helpers.createFolders(this.outputPath)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!this.options.incremental) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.config.readConfig()];
                    case 3:
                        _a.sent();
                        Logger_1.Logger.log(constants_1.INCREMENTAL_ENABLE_MESSAGE, LogLevel_enum_1.LogLevel.INFO);
                        return [4 /*yield*/, this.incremental.initCacheFolder()];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, this.incremental.readConfig()];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        this.compressionLog();
                        hrtimeStart = process.hrtime();
                        return [4 /*yield*/, this.createWorkers()];
                    case 7:
                        workersResponse = _a.sent();
                        files = workersResponse.files;
                        hrtime = process.hrtime(hrtimeStart);
                        if (!this.options.incremental) return [3 /*break*/, 10];
                        this.incremental.filePaths = workersResponse.filePaths;
                        return [4 /*yield*/, this.incremental.updateConfig()];
                    case 8:
                        _a.sent();
                        return [4 /*yield*/, this.config.writeConfig()];
                    case 9:
                        _a.sent();
                        _a.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        error_1 = _a.sent();
                        Logger_1.Logger.log(error_1, LogLevel_enum_1.LogLevel.ERROR);
                        throw new Error(error_1.message);
                    case 12:
                        filesCount = files.length;
                        if (filesCount) {
                            Logger_1.Logger.log(filesCount + " " + (filesCount > 1 ? 'files have' : 'file has') + " been compressed. (" + helpers_1.Helpers.readableHrtime(hrtime) + ")", LogLevel_enum_1.LogLevel.SUCCESS);
                        }
                        else {
                            Logger_1.Logger.log(constants_1.NO_FILES_MESSAGE, LogLevel_enum_1.LogLevel.WARNING);
                        }
                        return [2 /*return*/, files];
                }
            });
        });
    };
    /**
     * Returns available files to compress.
     */
    Compress.prototype.getFilesToCompress = function (target) {
        if (target === void 0) { target = this.target; }
        return __awaiter(this, void 0, void 0, function () {
            var compressedFiles, isFileTarget, filesList, targetParsed, filesList_1, filesList_1_1, file, filePath, fileStat, _a, _b, _c, _d, e_1_1;
            var e_1, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        compressedFiles = [];
                        return [4 /*yield*/, this.nativeFs.lstat(target)];
                    case 1:
                        isFileTarget = (_f.sent()).isFile();
                        if (!isFileTarget) return [3 /*break*/, 2];
                        targetParsed = path_1.default.parse(target);
                        target = targetParsed.dir;
                        filesList = [targetParsed.base];
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.nativeFs.readdir(target)];
                    case 3:
                        filesList = _f.sent();
                        _f.label = 4;
                    case 4:
                        _f.trys.push([4, 11, 12, 13]);
                        filesList_1 = __values(filesList), filesList_1_1 = filesList_1.next();
                        _f.label = 5;
                    case 5:
                        if (!!filesList_1_1.done) return [3 /*break*/, 10];
                        file = filesList_1_1.value;
                        filePath = path_1.default.resolve(target, file);
                        return [4 /*yield*/, this.nativeFs.lstat(filePath)];
                    case 6:
                        fileStat = _f.sent();
                        if (!fileStat.isDirectory()) return [3 /*break*/, 8];
                        _b = (_a = compressedFiles.push).apply;
                        _c = [compressedFiles];
                        _d = [[]];
                        return [4 /*yield*/, this.getFilesToCompress(filePath)];
                    case 7:
                        _b.apply(_a, _c.concat([__spreadArray.apply(void 0, _d.concat([__read.apply(void 0, [(_f.sent())])]))]));
                        return [3 /*break*/, 9];
                    case 8:
                        if (fileStat.isFile() &&
                            this.service.isValidFileExtensions(path_1.default.extname(filePath).slice(1))) {
                            if (fileStat.size < this.options.threshold) {
                                return [3 /*break*/, 9];
                            }
                            compressedFiles.push(filePath);
                        }
                        _f.label = 9;
                    case 9:
                        filesList_1_1 = filesList_1.next();
                        return [3 /*break*/, 5];
                    case 10: return [3 /*break*/, 13];
                    case 11:
                        e_1_1 = _f.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 13];
                    case 12:
                        try {
                            if (filesList_1_1 && !filesList_1_1.done && (_e = filesList_1.return)) _e.call(filesList_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 13: return [2 /*return*/, compressedFiles];
                }
            });
        });
    };
    /**
     * Create workers for parallel compression.
     */
    Compress.prototype.createWorkers = function () {
        return __awaiter(this, void 0, void 0, function () {
            var files, cpus, size, chunks, workers, results, error_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getFilesToCompress()];
                    case 1:
                        files = _a.sent();
                        cpus = this.options.workers || helpers_1.Helpers.getCPUs();
                        size = Math.ceil(files.length / cpus);
                        chunks = helpers_1.Helpers.chunkArray(files, size);
                        workers = chunks.map(function (chunk) { return _this.runCompressWorker(chunk); });
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, Promise.all(workers)];
                    case 3:
                        results = _a.sent();
                        return [2 /*return*/, results.reduce(function (accumulator, value) {
                                return {
                                    files: __spreadArray(__spreadArray([], __read(accumulator.files)), __read(value.files)),
                                    filePaths: __assign(__assign({}, accumulator.filePaths), value.filePaths),
                                };
                            }, {
                                files: [],
                                filePaths: {},
                            })];
                    case 4:
                        error_2 = _a.sent();
                        Logger_1.Logger.log(error_2.message, LogLevel_enum_1.LogLevel.ERROR);
                        throw new Error(error_2.message);
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Run compress worker
     */
    Compress.prototype.runCompressWorker = function (chunk) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var worker = new worker_threads_1.Worker(path_1.default.resolve(__dirname, process.env.NODE_ENV !== 'testing'
                            ? './Compress.worker.js'
                            : '../test/workers/Compress.worker.import.js'), {
                            workerData: {
                                chunk: chunk,
                                target: _this.target,
                                outputPath: _this.outputPath,
                                options: _this.options,
                                incrementalFilePaths: _this.options.incremental &&
                                    helpers_1.Helpers.filterObject(_this.incremental.filePaths, function (key) {
                                        return chunk.includes(key);
                                    }),
                            },
                        });
                        worker.on('online', function () {
                            Logger_1.Logger.log("[" + worker.threadId + "] " + constants_1.WORKER_STARTED, LogLevel_enum_1.LogLevel.INFO);
                        });
                        worker.once('message', function (result) {
                            worker.terminate();
                            resolve(result);
                        });
                        worker.on('error', function (error) {
                            worker.terminate();
                            reject(error);
                        });
                    })];
            });
        });
    };
    /**
     * Show message with compression params.
     */
    Compress.prototype.compressionLog = function () {
        var options = this.compressionInstance.readableOptions();
        Logger_1.Logger.log("Compression " + options, LogLevel_enum_1.LogLevel.INFO);
        if (!this.options.outputFileFormat) {
            Logger_1.Logger.log(constants_1.DEFAULT_OUTPUT_FORMAT_MESSAGE, LogLevel_enum_1.LogLevel.INFO);
        }
    };
    return Compress;
}());
exports.Compress = Compress;
//# sourceMappingURL=data:application/json;base64,