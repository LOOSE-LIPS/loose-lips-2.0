"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Index = void 0;
var commander_1 = require("commander");
var Compress_1 = require("./Compress");
var helpers_1 = require("./helpers");
var Incremental_1 = require("./Incremental");
var Config_1 = require("./Config");
var Logger_1 = require("./logger/Logger");
var LogLevel_enum_1 = require("./logger/LogLevel.enum");
var Index = /** @class */ (function () {
    function Index() {
        this.argv = process.argv;
        this.env = process.env;
        this.commander = new commander_1.Command();
    }
    Index.prototype.exec = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cache;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.commander.version(helpers_1.Helpers.getVersion()).name('gzipper');
                        this.commander
                            .command('compress <path> [outputPath]')
                            .alias('c')
                            .description('compress selected path and optionally set output directory')
                            .option('-v, --verbose', 'detailed level of logs')
                            .option('--incremental', 'incremental compression')
                            .option('-e, --exclude <extensions>', 'exclude file extensions from compression, example: jpeg,jpg...', this.optionToArray.bind(this))
                            .option('-i, --include <extensions>', 'include file extensions for compression, example: js,css,html...', this.optionToArray.bind(this))
                            .option('-t, --threshold <number>', 'exclude assets smaller than this byte size. 0 (default)', function (value) { return parseInt(value); })
                            .option('--level <number>', 'compression level 6 (default), 0 (no compression) - 9 (best compression)', function (value) { return parseInt(value); })
                            .option('--memory-level <number>', 'amount of memory which will be allocated for compression 8 (default), 1 (minimum memory) - 9 (maximum memory)', function (value) { return parseInt(value); })
                            .option('--strategy <number>', 'compression strategy 0 (default), 1 (filtered), 2 (huffman only), 3 (RLE), 4 (fixed)', function (value) { return parseInt(value); })
                            .option('--deflate', 'enable deflate compression')
                            .option('--brotli', 'enable brotli compression')
                            .option('--brotli-param-mode <value>', 'default, text (for UTF-8 text), font (for WOFF 2.0 fonts)')
                            .option('--brotli-quality <number>', 'brotli compression quality 11 (default), 0 - 11', function (value) { return parseInt(value); })
                            .option('--brotli-size-hint <number>', 'expected input size 0 (default)', function (value) { return parseInt(value); })
                            .option('--output-file-format <value>', 'output file format with default artifacts [filename].[ext].[compressExt]')
                            .option('--remove-larger', 'remove compressed files if they larger than uncompressed originals')
                            .option('--skip-compressed', 'skip compressed files if they already exist')
                            .option('--workers <number>', 'numbers of workers which will be spawned, system CPU cores count (default)', function (value) { return parseInt(value); })
                            .action(this.compress.bind(this));
                        cache = this.commander
                            .command('cache')
                            .description('manipulations with cache');
                        cache
                            .command('purge')
                            .description('purge cache storage')
                            .action(this.cachePurge.bind(this));
                        cache
                            .command('size')
                            .description('size of cached resources')
                            .action(this.cacheSize.bind(this));
                        return [4 /*yield*/, this.commander.parseAsync(this.argv)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Index.prototype.compress = function (target, outputPath, options) {
        return __awaiter(this, void 0, void 0, function () {
            var adjustedOptions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        adjustedOptions = {
                            verbose: this.env.GZIPPER_VERBOSE
                                ? !!parseInt(this.env.GZIPPER_VERBOSE)
                                : options.verbose,
                            incremental: this.env.GZIPPER_INCREMENTAL
                                ? !!parseInt(this.env.GZIPPER_INCREMENTAL)
                                : options.incremental,
                            exclude: this.optionToArray(this.env.GZIPPER_EXCLUDE) ||
                                options.exclude,
                            include: this.optionToArray(this.env.GZIPPER_INCLUDE) ||
                                options.include,
                            threshold: parseInt(this.env.GZIPPER_THRESHOLD) ||
                                options.threshold ||
                                0,
                            level: parseInt(this.env.GZIPPER_LEVEL) || options.level,
                            memoryLevel: parseInt(this.env.GZIPPER_MEMORY_LEVEL) ||
                                options.memoryLevel,
                            strategy: parseInt(this.env.GZIPPER_STRATEGY) || options.strategy,
                            brotli: this.env.GZIPPER_BROTLI
                                ? !!parseInt(this.env.GZIPPER_BROTLI)
                                : options.brotli,
                            deflate: this.env.GZIPPER_DEFLATE
                                ? !!parseInt(this.env.GZIPPER_DEFLATE)
                                : options.deflate,
                            brotliParamMode: this.env.GZIPPER_BROTLI_PARAM_MODE || options.brotliParamMode,
                            brotliQuality: parseInt(this.env.GZIPPER_BROTLI_QUALITY) ||
                                options.brotliQuality,
                            brotliSizeHint: parseInt(this.env.GZIPPER_BROTLI_SIZE_HINT) ||
                                options.brotliSizeHint,
                            outputFileFormat: this.env.GZIPPER_OUTPUT_FILE_FORMAT || options.outputFileFormat,
                            removeLarger: this.env.GZIPPER_REMOVE_LARGER
                                ? !!parseInt(this.env.GZIPPER_REMOVE_LARGER)
                                : options.removeLarger,
                            skipCompressed: this.env.GZIPPER_SKIP_COMPRESSED
                                ? !!parseInt(this.env.GZIPPER_SKIP_COMPRESSED)
                                : options.skipCompressed,
                            workers: parseInt(this.env.GZIPPER_WORKERS) || options.workers,
                        };
                        return [4 /*yield*/, this.runCompress(target, outputPath, adjustedOptions)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Index.prototype.cachePurge = function () {
        return __awaiter(this, void 0, void 0, function () {
            var config, incremental, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Logger_1.Logger.setVerboseMode(true);
                        config = new Config_1.Config();
                        incremental = new Incremental_1.Incremental(config);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, incremental.cachePurge()];
                    case 2:
                        _a.sent();
                        Logger_1.Logger.log('Cache has been purged, you are free to initialize a new one.', LogLevel_enum_1.LogLevel.SUCCESS);
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        Logger_1.Logger.log(err_1, LogLevel_enum_1.LogLevel.ERROR);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Index.prototype.cacheSize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var incremental, size, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Logger_1.Logger.setVerboseMode(true);
                        incremental = new Incremental_1.Incremental();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, incremental.cacheSize()];
                    case 2:
                        size = _a.sent();
                        Logger_1.Logger.log(size
                            ? "Cache size is " + helpers_1.Helpers.readableSize(size)
                            : "Cache is empty, initialize a new one with --incremental option.", LogLevel_enum_1.LogLevel.INFO);
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        Logger_1.Logger.log(err_2, LogLevel_enum_1.LogLevel.ERROR);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Index.prototype.runCompress = function (target, outputPath, options) {
        return __awaiter(this, void 0, void 0, function () {
            var compress, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Logger_1.Logger.setVerboseMode(true);
                        compress = new Compress_1.Compress(target, outputPath, this.filterOptions(options));
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, compress.run()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        Logger_1.Logger.log(err_3, LogLevel_enum_1.LogLevel.ERROR);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    // Delete undefined and NaN options.
    Index.prototype.filterOptions = function (options) {
        for (var key in options) {
            if (Object.prototype.hasOwnProperty.call(options, key)) {
                if (options[key] === undefined || options[key] !== options[key]) {
                    delete options[key];
                }
            }
        }
        return options;
    };
    Index.prototype.optionToArray = function (value) {
        if (typeof value === 'string' && value) {
            return value.split(',').map(function (item) { return item.trim(); });
        }
        return value;
    };
    return Index;
}());
exports.Index = Index;
if (process.env.NODE_ENV !== 'testing') {
    new Index().exec();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Jpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx1Q0FBb0M7QUFFcEMsdUNBQXNDO0FBQ3RDLHFDQUFvQztBQUVwQyw2Q0FBNEM7QUFDNUMsbUNBQWtDO0FBQ2xDLDBDQUF5QztBQUN6Qyx3REFBa0Q7QUFFbEQ7SUFBQTtRQUNtQixTQUFJLEdBQWEsT0FBTyxDQUFDLElBQUksQ0FBQztRQUM5QixRQUFHLEdBQXNCLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDOUMsY0FBUyxHQUFHLElBQUksbUJBQU8sRUFBRSxDQUFDO0lBNk5wQyxDQUFDO0lBM05PLG9CQUFJLEdBQVY7Ozs7Ozt3QkFDRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxpQkFBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUU3RCxJQUFJLENBQUMsU0FBUzs2QkFDWCxPQUFPLENBQUMsOEJBQThCLENBQUM7NkJBQ3ZDLEtBQUssQ0FBQyxHQUFHLENBQUM7NkJBQ1YsV0FBVyxDQUFDLDREQUE0RCxDQUFDOzZCQUN6RSxNQUFNLENBQUMsZUFBZSxFQUFFLHdCQUF3QixDQUFDOzZCQUNqRCxNQUFNLENBQUMsZUFBZSxFQUFFLHlCQUF5QixDQUFDOzZCQUNsRCxNQUFNLENBQ0wsNEJBQTRCLEVBQzVCLGdFQUFnRSxFQUNoRSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDOUI7NkJBQ0EsTUFBTSxDQUNMLDRCQUE0QixFQUM1QixrRUFBa0UsRUFDbEUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQzlCOzZCQUNBLE1BQU0sQ0FDTCwwQkFBMEIsRUFDMUIseURBQXlELEVBQ3pELFVBQUMsS0FBSyxJQUFLLE9BQUEsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFmLENBQWUsQ0FDM0I7NkJBQ0EsTUFBTSxDQUNMLGtCQUFrQixFQUNsQiwwRUFBMEUsRUFDMUUsVUFBQyxLQUFLLElBQUssT0FBQSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQWYsQ0FBZSxDQUMzQjs2QkFDQSxNQUFNLENBQ0wseUJBQXlCLEVBQ3pCLCtHQUErRyxFQUMvRyxVQUFDLEtBQUssSUFBSyxPQUFBLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBZixDQUFlLENBQzNCOzZCQUNBLE1BQU0sQ0FDTCxxQkFBcUIsRUFDckIsc0ZBQXNGLEVBQ3RGLFVBQUMsS0FBSyxJQUFLLE9BQUEsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFmLENBQWUsQ0FDM0I7NkJBQ0EsTUFBTSxDQUFDLFdBQVcsRUFBRSw0QkFBNEIsQ0FBQzs2QkFDakQsTUFBTSxDQUFDLFVBQVUsRUFBRSwyQkFBMkIsQ0FBQzs2QkFDL0MsTUFBTSxDQUNMLDZCQUE2QixFQUM3QiwyREFBMkQsQ0FDNUQ7NkJBQ0EsTUFBTSxDQUNMLDJCQUEyQixFQUMzQixpREFBaUQsRUFDakQsVUFBQyxLQUFLLElBQUssT0FBQSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQWYsQ0FBZSxDQUMzQjs2QkFDQSxNQUFNLENBQ0wsNkJBQTZCLEVBQzdCLGlDQUFpQyxFQUNqQyxVQUFDLEtBQUssSUFBSyxPQUFBLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBZixDQUFlLENBQzNCOzZCQUNBLE1BQU0sQ0FDTCw4QkFBOEIsRUFDOUIsMEVBQTBFLENBQzNFOzZCQUNBLE1BQU0sQ0FDTCxpQkFBaUIsRUFDakIsb0VBQW9FLENBQ3JFOzZCQUNBLE1BQU0sQ0FDTCxtQkFBbUIsRUFDbkIsNkNBQTZDLENBQzlDOzZCQUNBLE1BQU0sQ0FDTCxvQkFBb0IsRUFDcEIsNEVBQTRFLEVBQzVFLFVBQUMsS0FBSyxJQUFLLE9BQUEsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFmLENBQWUsQ0FDM0I7NkJBQ0EsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7d0JBRTlCLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUzs2QkFDekIsT0FBTyxDQUFDLE9BQU8sQ0FBQzs2QkFDaEIsV0FBVyxDQUFDLDBCQUEwQixDQUFDLENBQUM7d0JBRTNDLEtBQUs7NkJBQ0YsT0FBTyxDQUFDLE9BQU8sQ0FBQzs2QkFDaEIsV0FBVyxDQUFDLHFCQUFxQixDQUFDOzZCQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzt3QkFFdEMsS0FBSzs2QkFDRixPQUFPLENBQUMsTUFBTSxDQUFDOzZCQUNmLFdBQVcsQ0FBQywwQkFBMEIsQ0FBQzs2QkFDdkMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7d0JBRXJDLHFCQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBQTs7d0JBQTFDLFNBQTBDLENBQUM7Ozs7O0tBQzVDO0lBRWEsd0JBQVEsR0FBdEIsVUFDRSxNQUFjLEVBQ2QsVUFBa0IsRUFDbEIsT0FBd0I7Ozs7Ozt3QkFFbEIsZUFBZSxHQUFvQjs0QkFDdkMsT0FBTyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZTtnQ0FDL0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUF5QixDQUFDO2dDQUNoRCxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU87NEJBQ25CLFdBQVcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQjtnQ0FDdkMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBNkIsQ0FBQztnQ0FDcEQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXOzRCQUN2QixPQUFPLEVBQ0osSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBYztnQ0FDMUQsT0FBTyxDQUFDLE9BQU87NEJBQ2pCLE9BQU8sRUFDSixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFjO2dDQUMxRCxPQUFPLENBQUMsT0FBTzs0QkFDakIsU0FBUyxFQUNQLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUEyQixDQUFDO2dDQUM5QyxPQUFPLENBQUMsU0FBUztnQ0FDakIsQ0FBQzs0QkFDSCxLQUFLLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBdUIsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLOzRCQUNsRSxXQUFXLEVBQ1QsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQThCLENBQUM7Z0NBQ2pELE9BQU8sQ0FBQyxXQUFXOzRCQUNyQixRQUFRLEVBQ04sUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQTBCLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUTs0QkFDbkUsTUFBTSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYztnQ0FDN0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUF3QixDQUFDO2dDQUMvQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU07NEJBQ2xCLE9BQU8sRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWU7Z0NBQy9CLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBeUIsQ0FBQztnQ0FDaEQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPOzRCQUNuQixlQUFlLEVBQ2IsSUFBSSxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsSUFBSSxPQUFPLENBQUMsZUFBZTs0QkFDL0QsYUFBYSxFQUNYLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLHNCQUFnQyxDQUFDO2dDQUNuRCxPQUFPLENBQUMsYUFBYTs0QkFDdkIsY0FBYyxFQUNaLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLHdCQUFrQyxDQUFDO2dDQUNyRCxPQUFPLENBQUMsY0FBYzs0QkFDeEIsZ0JBQWdCLEVBQ2QsSUFBSSxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsSUFBSSxPQUFPLENBQUMsZ0JBQWdCOzRCQUNqRSxZQUFZLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUI7Z0NBQzFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMscUJBQStCLENBQUM7Z0NBQ3RELENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWTs0QkFDeEIsY0FBYyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsdUJBQXVCO2dDQUM5QyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLHVCQUFpQyxDQUFDO2dDQUN4RCxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWM7NEJBQzFCLE9BQU8sRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUF5QixDQUFDLElBQUksT0FBTyxDQUFDLE9BQU87eUJBQ3pFLENBQUM7d0JBRUYscUJBQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLGVBQWUsQ0FBQyxFQUFBOzt3QkFBM0QsU0FBMkQsQ0FBQzs7Ozs7S0FDN0Q7SUFFYSwwQkFBVSxHQUF4Qjs7Ozs7O3dCQUNFLGVBQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ3RCLE1BQU0sR0FBRyxJQUFJLGVBQU0sRUFBRSxDQUFDO3dCQUN0QixXQUFXLEdBQUcsSUFBSSx5QkFBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDOzs7O3dCQUcxQyxxQkFBTSxXQUFXLENBQUMsVUFBVSxFQUFFLEVBQUE7O3dCQUE5QixTQUE4QixDQUFDO3dCQUMvQixlQUFNLENBQUMsR0FBRyxDQUNSLDhEQUE4RCxFQUM5RCx3QkFBUSxDQUFDLE9BQU8sQ0FDakIsQ0FBQzs7Ozt3QkFFRixlQUFNLENBQUMsR0FBRyxDQUFDLEtBQUcsRUFBRSx3QkFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7Ozs7S0FFbkM7SUFFYSx5QkFBUyxHQUF2Qjs7Ozs7O3dCQUNFLGVBQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ3RCLFdBQVcsR0FBRyxJQUFJLHlCQUFXLEVBQUUsQ0FBQzs7Ozt3QkFHdkIscUJBQU0sV0FBVyxDQUFDLFNBQVMsRUFBRSxFQUFBOzt3QkFBcEMsSUFBSSxHQUFHLFNBQTZCO3dCQUMxQyxlQUFNLENBQUMsR0FBRyxDQUNSLElBQUk7NEJBQ0YsQ0FBQyxDQUFDLG1CQUFpQixpQkFBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUc7NEJBQy9DLENBQUMsQ0FBQyxpRUFBaUUsRUFDckUsd0JBQVEsQ0FBQyxJQUFJLENBQ2QsQ0FBQzs7Ozt3QkFFRixlQUFNLENBQUMsR0FBRyxDQUFDLEtBQUcsRUFBRSx3QkFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7Ozs7S0FFbkM7SUFFYSwyQkFBVyxHQUF6QixVQUNFLE1BQWMsRUFDZCxVQUFrQixFQUNsQixPQUF3Qjs7Ozs7O3dCQUV4QixlQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUN0QixRQUFRLEdBQUcsSUFBSSxtQkFBUSxDQUMzQixNQUFNLEVBQ04sVUFBVSxFQUNWLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQzVCLENBQUM7Ozs7d0JBR0EscUJBQU0sUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFBOzt3QkFBcEIsU0FBb0IsQ0FBQzs7Ozt3QkFFckIsZUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFHLEVBQUUsd0JBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7Ozs7O0tBRW5DO0lBRUQsb0NBQW9DO0lBQzVCLDZCQUFhLEdBQXJCLFVBQXlCLE9BQVU7UUFDakMsS0FBSyxJQUFNLEdBQUcsSUFBSSxPQUFPLEVBQUU7WUFDekIsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUFFO2dCQUN0RCxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDL0QsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3JCO2FBQ0Y7U0FDRjtRQUVELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFTyw2QkFBYSxHQUFyQixVQUF5QixLQUFRO1FBQy9CLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssRUFBRTtZQUN0QyxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsSUFBSSxJQUFLLE9BQUEsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFYLENBQVcsQ0FBQyxDQUFDO1NBQ3BEO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBQ0gsWUFBQztBQUFELENBQUMsQUFoT0QsSUFnT0M7QUFoT1ksc0JBQUs7QUFrT2xCLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO0lBQ3RDLElBQUksS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7Q0FDcEIifQ==